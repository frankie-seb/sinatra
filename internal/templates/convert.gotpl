// Code generated by Frankie Health Generator, DO NOT EDIT.

package {{.PackageName}}

import (
	"context"
	"fmt"
	"io"
	"strconv"
	"time"
	"sync"
	"errors"
	"bytes"
	"strings"

	base_helpers "github.com/FrankieHealth/be-generator/utils"
	"github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"


	"github.com/ericlagergren/decimal"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/null/v8"

	"database/sql"
	{{ range $import := .Imports }}
		{{ $import.Alias }} "{{ $import.ImportPath }}"
	{{ end }}
)

{{ range $enum := .Enums }}

	type {{$enum.Name}} string
	const (
	{{- range $value := .Values }}
		{{$enum.Name|go}}{{ .Name|go }}        {{$enum.Name}} = "{{ .NameLower }}"
	{{- end }}
	)

	var {{$enum.Name}}DBValue = map[{{ $.GqlModels.PackageName }}.{{ .Name }}]{{$enum.Name}}{
		{{- range $value := .Values }}
			{{ $.GqlModels.PackageName }}.{{$enum.Name|go}}{{ .Name|go }}: {{$enum.Name|go}}{{ .Name|go }},
		{{- end }}
	}
	var {{$enum.Name}}APIValue = map[{{$enum.Name}}]{{ $.GqlModels.PackageName }}.{{ .Name }}{
		{{- range $value := .Values }}
			{{$enum.Name|go}}{{ .Name|go }}: {{ $.GqlModels.PackageName }}.{{$enum.Name|go}}{{ .Name|go }},
		{{- end }}
	}


	func NullDotStringToPointer{{ .Name }}(v null.String) *{{ $.GqlModels.PackageName }}.{{ .Name }} {
		s := StringTo{{ .Name }}(v.String)
		if s == "" {
			return nil
		}
		return &s
	}

	func NullDotStringTo{{ .Name }}(v null.String) {{ $.GqlModels.PackageName }}.{{ .Name }} {
		if !v.Valid {
			return ""
		}
		return StringTo{{ .Name }}(v.String)
	}

	func StringTo{{ .Name }}(v string) {{ $.GqlModels.PackageName }}.{{ .Name }} {
		s := {{$enum.Name}}APIValue[{{ .Name }}(v)]
		return s
	}

	func StringToPointer{{ .Name }}(v string) *{{ $.GqlModels.PackageName }}.{{ .Name }} {
		s := StringTo{{ .Name }}(v)
		if s == "" {
			return nil
		}
		return &s
	}

	func Pointer{{ .Name }}ToString(v *{{ $.GqlModels.PackageName }}.{{ .Name }}) string {
		if v == nil {
			return ""
		}
		return {{ .Name }}ToString(*v)
	}

	func Pointer{{ .Name }}ToNullDotString(v *{{ $.GqlModels.PackageName }}.{{ .Name }}) null.String {
		if v == nil {
			return null.NewString("", false)
		}
		return {{ .Name }}ToNullDotString(*v)
	}

	func {{ .Name }}ToNullDotString(v {{ $.GqlModels.PackageName }}.{{ .Name }}) null.String {
		s := {{ .Name }}ToString(v)
		return null.NewString(s, s != "")
	}

	func {{ .Name }}ToString(v {{ $.GqlModels.PackageName }}.{{ .Name }}) string {
		s := {{$enum.Name}}DBValue[v]
		return string(s)
	}
{{ end }}

{{ range $model := .Models }}

	{{- if .IsNormal  -}}

		{{- if .HasPrimaryStringID }}
			func {{ .Name }}WithStringID(id string) *{{ $.GqlModels.PackageName }}.{{ .Name }} {
				return &{{ $.GqlModels.PackageName }}.{{ .Name }}{
					ID: {{ $model.Name }}IDToGraphQL(id),
				}
			}

			func {{ .Name }}WithNullDotStringID(id null.String) *{{ $.GqlModels.PackageName }}.{{ .Name }} {
				return {{ .Name }}WithStringID(id.String)
			}
		{{- else }}
			func {{ .Name }}WithUintID(id uint) *{{ $.GqlModels.PackageName }}.{{ .Name }} {
				return &{{ $.GqlModels.PackageName }}.{{ .Name }}{
					ID: {{ $model.Name }}IDToGraphQL(id),
				}
			}

			func {{ .Name }}WithIntID(id int) *{{ $.GqlModels.PackageName }}.{{ .Name }} {
				return {{ .Name }}WithUintID(uint(id))
			}

			func {{ .Name }}WithNullDotUintID(id null.Uint) *{{ $.GqlModels.PackageName }}.{{ .Name }} {
				return {{ .Name }}WithUintID(id.Uint)
			}

			func {{ .Name }}WithNullDotIntID(id null.Int) *{{ $.GqlModels.PackageName }}.{{ .Name }} {
				return {{ .Name }}WithUintID(uint(id.Int))
			}
			
		{{- end }}

		func {{ .PluralName }}ToGraphQL(am []*{{ $.BoilerModels.PackageName }}.{{ .Name }})( []*{{ $.GqlModels.PackageName }}.{{ .Name }}) {
			ar := make([]*{{ $.GqlModels.PackageName }}.{{ .Name }}, len(am))
			for i,m := range am {
				ar[i] = {{ .Name }}ToGraphQL(m)
			}
			return ar
		}

		{{ range $field := .Fields }}
			{{- if $field.IsPrimaryNumberID -}}
				func {{ $model.Name }}IDToGraphQL(v uint) string {
					return base_helpers.IDToGraphQL(v, {{ $.BoilerModels.PackageName }}.TableNames.{{ $model.BoilerModel.TableName }})
				}
			{{- end -}}
			{{- if $field.IsPrimaryStringID -}}
				func {{ $model.Name }}IDToGraphQL(v string) string {
					return base_helpers.StringIDToGraphQL(v, {{ $.BoilerModels.PackageName }}.TableNames.{{ $model.BoilerModel.TableName }})
				}
			{{- end -}}
		{{- end }}


	func {{ .Name }}ToGraphQL(m *{{ $.BoilerModels.PackageName }}.{{ .BoilerModel.Name }})( *{{ $.GqlModels.PackageName }}.{{ .Name }}) {
		if m == nil {
			return nil
		}

		r := &{{ $.GqlModels.PackageName }}.{{ .Name }}{
			{{ range $field := .Fields -}}
				{{- if $field.ConvertConfig.IsCustom -}}
					{{- if $field.IsPrimaryID -}}
						{{- $field.Name }}: {{ $field.ConvertConfig.ToGraphQL }},
					{{- else if and $field.IsNumberID $field.BoilerField.IsRelation -}}
						{{- $field.Name }}: {{ $field.ConvertConfig.ToGraphQL }},
					{{- else if $field.IsRelation -}}
					// {{- $field.Name }}: ????
					{{- else -}}
						{{- $field.Name }}: {{ $field.ConvertConfig.ToGraphQL }}(m.{{ $field.BoilerField.Name }}),
					{{- end }}
				{{- else if $field.IsRelation -}}
				{{- else -}}
					{{- $field.Name }}: m.{{ $field.BoilerField.Name }},
				{{- end }}
			{{ end }}
		}

		{{ range $field := .Fields }}
	
			{{- if $field.IsRelation }}

				{{- if $field.IsPlural }}
					if m.R != nil && m.R.{{ $field.Name }} != nil  {
						r.{{ $field.Name }} = {{ $field.BoilerField.Relationship.PluralName }}ToGraphQL(m.R.{{ $field.Name }})
					} 
				{{- else }}
					{{- if $field.BoilerField.IsForeignKey }}
						if base_helpers.{{ $field.ConvertConfig.BoilerTypeAsText }}IsFilled(m.{{ $field.Name }}ID) {
							if m.R != nil && m.R.{{ $field.Name }} != nil  {
								r.{{ $field.Name }} = {{ $field.BoilerField.Relationship.Name }}ToGraphQL(m.R.{{ $field.Name }})
							} else {
								r.{{ $field.Name }} = {{ $field.BoilerField.Relationship.Name }}With{{ $field.ConvertConfig.BoilerTypeAsText }}ID(m.{{ $field.Name }}ID)
							}
						}
					{{- else }}
						if m.R != nil && m.R.{{ $field.Name }} != nil  {
							r.{{ $field.Name }} = {{ $field.BoilerField.Relationship.Name }}ToGraphQL(m.R.{{ $field.Name }})
						}
					{{- end -}}
				{{- end -}}
			{{end -}}
		{{- end }}

		return r
	}

		{{ range $field := .Fields }}
			{{- if $field.IsPrimaryNumberID }}
				func {{ $model.Name }}ID(v string) {{ $field.BoilerField.Type }} {
					return base_helpers.IDToBoiler{{ $field.BoilerField.Type|go }}(v)
				}

				func {{ $model.Name }}IDs(a []string) []{{ $field.BoilerField.Type }} {
					return base_helpers.IDsToBoiler{{ $field.BoilerField.Type|go }}(a)
				}
				
			{{- end -}}
			{{- if $field.IsPrimaryStringID }}
				func {{ $model.Name }}ID(v string) {{ $field.BoilerField.Type }} {
					return base_helpers.StringIDToBoiler{{ $field.BoilerField.Type|go }}(v)
				}

				func {{ $model.Name }}IDs(a []string) []{{ $field.BoilerField.Type }} {
					return base_helpers.StringIDsToBoiler{{ $field.BoilerField.Type|go }}(a)
				}

			{{- end -}}
		{{- end }}
	{{ end }}
{{- end }}
